[{"title":"万字多图 | UML 入门指南","url":"https://java4u.cn/course/uml_quick_start/","content":"一、前言谈到面向对象技术的分析和设计，自然就离不开 UML。对于 UML 这个概念，很多程序员朋友耳熟能详，也有在用，但在工作中，一些朋友其实并不擅长使用 UML 甚至对 UML 这个东西模棱两可，也包括我自己。因此我希望可以结合自己的经验和实践，写一篇 UML 的入门文章，帮助做面向对象的程序员朋友能更好的利用它，从而顺利完成自己的编程设计工作。\n以下是本文大纲。\n\n二、从一个示例开始先举个现实世界的例子。我们上大学的时候，作为学生，每人都有一张学生证，会归属到一个班级，上学时可能会用到自行车。很多同学还会考驾照，挑放假时间练车，车可能是轿车也可能是皮卡。\n如果想通过在线的方式记录以上的信息和行为，在软件世界中如何表达呢？\n相信很多朋友的操作是，找到这段话里的主语和宾语，也就找到了这个例子中涉及的角色，然后通过动词来判断各个角色之间的关系和能力，最后用代码的方式来表达，产出可执行的程序。\n像下图这样，识别出关键的实体和它们之间的关系。\n\n用软件工程的方式，解决现实中的问题，是信息时代最明显的特点，这让我们的生活和工作变得更加便利。\n但现实世界错综复杂，灵活多变，每个人的理解可能会有不同，从现实世界到软件世界的映射，就变得困难重重，一团乱麻。\n如何让现实世界到软件世界映射变的简单容易，这就是 UML 要解决的问题。\n三、什么是 UML？UML 全称是 Unified Modeling Language（统一建模语言），它以图形的方式来描述软件的概念。\n3.1 为什么称为语言先说语言，为什么称为语言？\n名称的落脚点是语言。既然是语言，那么它就会具备语言的特性，比如结构上它由词汇和语法构成，功能上它能解决沟通问题。\n你熟知的语言里比较多的应该是汉语和英语，如果从事软件行业，C 语言和 Java 语言你应该也不会陌生。英语和 Java 语言明显都是语言，却常常不被放在一起讨论，为什么？因为它们是不同维度的语言。英语是解决现实世界中人与人之间沟通问题的人类语言，Java 是解决软件世界中程序员与计算机之间沟通问题的计算机语言。\n人类语言本质上是事实和观点的表达，计算机语言本质上是0 和 1 的表达。前者的表达形式是难以确定的，而且可能会产生歧义，所以才会有「被误解是表达者的宿命」这样的观点， 但后者就是确定性无歧义的 0 1 表达。\n这么看来，UML 的目标是通过一定结构的表达，来解决现实世界到软件世界的沟通问题。\n3.2 什么是建模再说建模，模是什么，需要怎么建？\n建模简单讲，是指通过抽象的方式解决某个领域的问题。各个抽象角度共同组成了一个问题领域。\n\n对于传统模型而言，建造它是为了证明这个问题领域下某件事物能否工作。当然它有前提，即建造模型的成本远远低于建造实物的成本。比如造飞机或造高楼。\n对于软件模型而言，建造它是为了与他人沟通，也为了保存这个问题领域下软件设计的最终成果。当然它也有前提，就是模型比代码更说明问题。\n比如购物这个问题，甲可以在淘宝上买衣服，乙可以在亚马逊上买书，丙可以在京东上买手机。\n谁买东西？是甲、乙和丙，他们都能抽象成人。\n买什么东西？有衣服、书和手机，它们都能抽象成货。\n在哪里买？在淘宝，亚马逊和京东，它们都能抽象成场。\n整体抽象一下就是人到场里买货。所以购物这个场景所抽象出来的人货场，就用来解决零售领域的问题。当然还可能会有些规则，比如成为注册会员才能发生交易。\n我们会发现，一个特定的事件（比如购物）里，会有特定的人的行为（比如甲乙丙要上电商网站），会有特定的物（比如货），有特定的规则（比如注册会员），共同完成购物这件事。\n特定的事 &#x3D; 特定的人的行为 + 特定的物 + 特定的规则\n\n\n在人货场这个抽象角度里，就会涉及到很多特定的事，包括会员注册，会员下单，会员支付，商家发货，快递公司邮寄等等。\n\n模简单讲，就是人、事、物和规则。\n人是一切的中心，人要做事，做事就会使用一些物并产生另一些物，同时做事需要遵循一定的规则。\n人驱动系统，事体现过程，物记录结果，规则是控制。\n建立模型的关键就是弄明白有什么人，什么人做什么事，什么事产生什么物，中间有什么规则，再把人、事、物之间的关系定义出来，一个模型也就基本成型了。\n3.3 统一的意义在哪统一的普遍意义是形成标准。所谓标准，就是所有人都明白的表述，所有人都遵从的格式。标准可以让信息在人群中无障碍地流通，即使这些信息来自不同地域、不同文化、不同社会或不同组织。\n比如美元作为国际统一使用的货币方便了全球的经济贸易，我们国家普及普通话方便了不同地区的交流沟通。\n在软件世界，任何一种组件化开发模式背后都有一个标准在规范和指导，比如 Java 的 JSR 标准。有了标准，编程就容易组件化，协作效率也会提升很多。对 UML 来说，这就是统一的意义。\n四、为什么需要 UML一个软件项目要经历业务调研、立项、需求采集、架构设计、编码开发和测试验证等多个环节。\n每个环节可能角色并不相同，同样的文档同样的话语越向后传递就越容易失真。因此就容易出现最终交付的产品不是客户真正想要的这种情况。\n如何避免角色间信息传递的失真，保证信息能被准确的传达和准确的理解？一种好的办法就是大家使用标准化的语言。\n统一建模语言(UML)就试图用标准化的语言来覆盖整个软件过程，让不同团队不同角色可以用相同的语言顺畅的沟通。\n在信息传播方面，图形相对于文字，人脑的接受能力显然更强。因此，UML 采用了「可视化」的图形方式来定义语言。\n五、UML 的适用场景UML 既可以描述某个问题领域，也可以表达构思中的软件设计，还可以描述已经完成的软件实现。\n它适用于面向对象分析设计的整个过程。这个过程可以分为三个阶段，如下图。\n\n第一个阶段是通过建模将现实世界转为业务模型。业务模型真实映射了参与者（业务活动的驱动者）在现实世界的行为。\n\n从图里可以看到，现实世界映射到业务模型后，是使用 参与者 和 用例 这两个 UML 的核心元素表达的。参与者作为一个特定事件的驱动者，用例则描述了这个驱动者的业务目标。文章后边也会提到这两个元素。\n第二个阶段是对业务模型概念化，建立适合计算机理解和实现的模型，也就是概念模型，或者叫分析模型。分析模型向上映射了原始需求，向下为计算机实现规定了一种高层次的抽象，是一种过渡模型。\n\n现实世界千差万别的业务，都用 边界、控制和实体这几个核心元素来描述，同时也引入了 包、组件 这些与现实世界毫不相干的概念做包装。\n第三个阶段是对概念模型实例化，得到相对详细的设计模型。\n\n在设计模型中，概念模型中的边界类可以被转化为操作界面或者系统接口；控制类可以被转化为计算程序或控制程序，例如工作流、算法体等；实体类可以转化为数据库表、XML 文档或者其他带有持久化特征的类。\n同样的概念模型会因为选择不同而得到不同的设计模型。比如技术选型上使用不同的编程语言，不同的中间件就会得到不同的设计。\n为什么需要这一道转换呢？\n因为“边界”、“控制”、“实体”这些对象化的概念，虽然是计算机可以理解的，但它并不是真正的对象实例，也就是说它们并不是可执行代码，概念模型只是纸上谈兵。真正的对象世界行为是由 Java 类、C++ 类、JSP 等这些可执行代码构成的。\n换句话说，设计模型是概念模型在特定环境和条件下的实例化，实例化后的对象行为执行了概念模型描述的那些信息。\n以下是面向对象分析设计的完整过程，它表达了现实世界是怎么通过 UML 映射到对象世界的。\n\n六、UML 的组成结构前面花了比较大的篇幅分析了 UML 的定位和适用场景，目的是帮助读者建立对 UML 整体系统性的认知，而不是过早的陷入 UML 的使用细节里。我们要应用一项技术或工具，不能单纯的因为它的酷炫或者说业界都在用所以我们要用，而应该结合自己的使用场景以及技术或工具的特点，来确认这项技术或工具究竟是不是我们需要的。\n在读者了解 UML 在面向对象分析设计领域优秀的特性之后，我们再来看看 UML 的一些细节。\n凡是语言，都会存在基本词汇和语法。\n那么对应到 UML 里，基本词汇就是核心元素，语法就是核心视图。\nUML 的组成结构如下图：\n\n6.1 核心元素我们先介绍核心元素，下图是大纲。\n\n6.1.1 版型版型：也称「类型」或「构造型」。是对 UML 元素基础定义的扩展，在元素基础定义的基础上赋予特别的含义，使得这个元素适用于特定的场合。\n比如，我们前边提到的「边界类」、「实体类」、「控制类」都是类的版型。\n6.1.2 参与者\n参与者定位：事件的第一驱动者，也是系统的服务方。比如你在电商网站购物，你就是参与者。\n6.1.3 用例\n用例定位：系统执行的一系列操作，并生成参与者可以观察的值。比如你在电商网站交易，会生成在线订单，用户下单就是一个用例。\n用例版型：\n\n\n业务用例：用于需求阶段业务领域建模。与计算机系统建模无关，比如下单可以不依赖在线服务，而只是线下签署协议。业务建模的目标是让需求人员和客户能够达成共识。\n业务用例实现：业务用例的一种实现方式，一个业务用例可以有多种实现方式。比如下单后的支付，可以用现金，也可以银行卡转账，还可以第三方支付。\n\n\n\n概念用例：用于获取业务模型中的关键概念，分析出核心业务结构。业务架构就是概念建模阶段产生，同时为系统建模阶段提供重要指导。比如用户下单这个用例，可以从实现过程中获得一些核心业务，并把它们展现出来。\n\n\n\n系统用例：用于定义系统范围、获取功能性需求。也就是我们常挂在嘴边的用例。像业务用例中提到的线下签约的方式，就不会纳入到系统用例中，但如果是电子签约的话，就可以成为系统用例了。\n系统用例实现：系统用例的一种实现方式，一个系统用例可以有多种实现方式。比如下单后的支付，可以接入微信支付接口，也可以接入支付宝支付接口。\n\n你会发现，同是用例的版型，业务用例与系统用例的区别就在于业务用例是客户业务视角，系统用例是系统视角。\n6.1.4 边界\n边界定位：用于业务建模和系统建模阶段的分析，保证分析粒度在一定的范围内，不会扩散。\n比如一个电商网站按领域职责作为边界，会有店铺域、商品域、会员域、交易域、支付域和营销域等。各域只负责域内的事情，就能够减少混乱紧耦合的局面。\n\n一个好的分析和设计如同一筐带壳的鸡蛋，清清爽爽；一个差的设计如同一堆打碎了壳的鸡蛋，粘粘糊糊。壳，是好坏的关键。\n\n6.1.5 业务实体\n业务实体定位：它代表参与者执行业务用例时所处理或使用的事物，特别用于在业务建模阶段建立领域模型。业务实体是类（class）的一种版型。\n业务实体的结构：包含属性和方法。属性用来保存业务实体特征，方法用来访问业务实体。比如一台电视，把它看成一个业务实体的话，它的属性有运行状态和音量，它的方法就是遥控器，我们可以开、关、调声音，但是我们不可以试图让它飞起来——因为它没有这样的方法。\n6.1.6 包\n包定位：容纳并为其他 UML 元素分类。比如 Java 后端经常会提供 jar 包给接入方使用。\n6.1.7 分析类\n分析类定位：用于代表系统中主要的职责簇，由此产生系统的设计类和子系统。\n\n边界类：用于对系统外部环境和内部运作之间的交互进行建模。比如现实世界的窗户，计算机世界的网页。\n控制类：用于对用例特有的控制行为进行建模。比如显示逻辑和业务逻辑通过控制层分离的 MVC 架构。\n实体类：用于对需要存储的信息和相关行为进行建模。源于业务模型中的业务实体。\n\n分析类的抽象层次较高，比设计和实现要稳定很多，因此方便维护，也更容易获得一个稳定架构来指导整个软件的开发。\n6.1.8 设计类\n设计类定位：是系统实施中一个或多个对象的抽象，由此映射到实现代码，依赖于实施语言。\n设计类结构：\n\n类型：对对象某一方面特征的归纳和抽象。映射到编码中的 class。\n属性：对象特征。映射到编码中的 field。\n方法：访问对象属性的唯一途径。映射到编码中的 method。\n\n6.1.9 关系\n关系定位：抽象出对象之间的联系，让对象构成某个特定的结构。\n关系分为以下几种：\n\n关联（association）\n关系：是一种拥有的关系，即一个类知道另一个类的属性和方法；比如老师与学生可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。\n箭头和连线：带普通箭头的实心线，指向被拥有者。\n适用场景：类图。\n\n\n依赖（dependency）\n关系：是一种使用的关系，即一个类的实现需要另一个类的协助，是一种弱关系，随运行场景变化。比如削苹果时，人依赖于刀，脱离了这个场景，依赖关系就不存在了。\n箭头和连线：带箭头的虚线，指向被使用者。\n适用场景：类图。\n\n\n泛化（generalization）\n关系：是一种继承的关系，比如猫是动物的一种。\n箭头和连线：带三角的实线，箭头指向父类。\n适用场景：类图。\n\n\n实现（realization）\n关系：是一种实现的关系，比如用例和用例实现的关系，接口与实现类的关系。\n箭头和连线：带三角的虚线，箭头指向用例实现或接口类。\n适用场景：用例图，类图。\n\n\n聚合（aggregation）\n关系：是整体与部分的关系，且部分可以离开整体而单独存在。生命周期各自独立。如车和轮胎是聚合关系，轮胎离开车仍然可以存在。\n箭头和连线：带空心菱形的实线，菱形指向整体。\n适用场景：类图。\n\n\n组合（composition）\n关系：是整体与部分的关系，但部分不能离开整体而单独存在。同生同灭。如公司和部门是组合关系，没有公司就不存在部门。\n箭头和连线：带实心(黑色实心：要死一起死，良心是黑的)菱形的实线，菱形指向整体。\n适用场景：类图。\n\n\n\n关联关系和依赖关系的区别：\n\n关联关系是静态天然的联系，依赖关系是动态临时的联系。\n\n此外还有只用于用例中的关系：\n\n\n扩展（extends）\n关系：用于在用例模型中说明向基本用例中的某个扩展点插入扩展用例。\n箭头和连线：带箭头的虚线加版型&lt;&lt;extends&gt;&gt;。\n特点：用例可选。\n\n\n包含（include）\n关系：用于在用例模型中说明在执行基本用例的用例实例过程中插入的行为段。\n箭头和连线：带箭头的虚线加版型&lt;&lt;include&gt;&gt;。\n特点：用例必需。\n\n\n\n6.1.10 组件\n组件定位：实现特定功能的逻辑代码模块。比如分布式应用架构下，将业务目标拆成多个功能，每个功能作为组件独立部署。这样这些组件也能被其他场景复用。\n6.1.11 节点\n节点定位：表示应用程序的部署单元。比如分布式应用的环境中，服务器或设备会有很多，就需要通过节点来体现物理部署的情况。\n6.2 核心视图前面我们介绍了 UML 的核心元素，这些元素分别应用于面对对象分析设计的各个阶段，正是它们之间的相互组合，才形成了 UML 里的各种视图，最终指导软件设计。\n接下来讲讲核心视图里的结构视图和行为视图，下图是大纲。\n\n6.2.1 结构视图结构视图也称为静态视图。静态视图就是表达静态事物的。它只描述事物的静态结构，而不描述其动态行为。这里简要介绍的静态视图包括用例图，对象图，类图，组件图，包图和部署图。\n6.2.1.1 用例图用例图包含参与者、用例和关系这三种核心元素，不同的视角可以得到不同的用例视图，它展现了系统的功能性需求。\n所谓不同的视角，可以对应面向对象分析设计的三阶段。\n\n建立业务模型阶段，产出业务用例视图。\n建立概念模型阶段，产出概念用例视图。\n建立设计模型阶段，产出系统用例视图。\n\n就借阅图书的用例而言，业务用例视图如下，它是完全从业务角度出发，和计算机系统无关。\n\n而我们在业务用例分析的过程中，可以分解出一些关键的概念用例，并建立它们之间的关系，如下图(bu 表示业务用例，cu 表示概念用例)。\n\n我们对业务用例进行分析以后，就可以绘制系统用例视图。但不是所有的业务用例都有系统用例对应，比如检查借阅证可能是手工工作，就不需要纳入系统建设范围。\n下图是借阅图书的系统用例视图。\n\n6.2.1.2 类图类图用于展示系统中的类及其相互之间的关系。\n类图建模常用的方式是从概念层，到说明层，最后到实现层这么一个抽象层次逐步降低和细化的过程。\n概念层类图位于业务建模阶段，这个阶段采用业务实体这个核心元素来表示。\n下图是网上购物的业务实体图。\n\n网上购物主要由商品、订单、支付账户这几个关键类构成，这几个类的交互能够完成网上购物这个业务目标。\n说明层类图位于概念建模阶段，这个阶段采用分析类这个核心元素来表示。\n下图展示了网上购物的说明层类图，这个类图表达了从计算机的视角来说，网上购物这个业务目标是由哪些类来完成的，这些类的接口保证了这个业务目标的达成。\n\n实现层类图位于设计建模阶段，这个阶段采用设计类这个核心元素来表示。\n到了这一层，类图可视作伪代码，因此，在这个层次上，类必须明确采用哪种实现语言、什么设计模式、什么通信标准、遵循什么规范等。\n下图展示了查询商品功能的类图。可以看到，到了实现层类图，类描述和类关系已经是伪代码级别了。\n\n由此可见，在软件生命周期的不同阶段，类图也有三种不同的表达，他们分别是概念层类图，说明层类图和实现层类图。\n很多朋友在建模的时候只会用到实现层类图，并非他们对问题领域足够了解，而是不清楚类图也分了这么三层。\n6.2.1.3 对象图对象图是类图的实例，标识和类图基本相同。由于对象存在生命周期，对象图只能在系统某一时间段存在，因此对象图可以被想象成正在运行的系统在某一时刻的快照。\n比如一个正在运行的列车，如果用对象图来描述，某个时间点你会发现以下静态图片：\n\n当前的运行状态（运行中或停车中）\n当前的乘客数量。（如果捕捉在不同的时间，该值会变化）\n\n\n6.2.1.4 包图在实际的项目中，建模过程获得的元素可能是非常多的，如果将这些元素的关系都绘制出来，看上去就会特别乱，特别复杂，也难以识别。\n那为了更好的理解和管理这些建模元素，我们就需要有规律的对元素进行组织。包图就起到了这么一个作用，通过包这个容器，可以从大到小、从粗到细地将建模元素组织起来，便于我们的分析，交流和细化。\n下图是网上购物的领域包图，它表达了关键业务领域及其依赖关系。\n\n下图展示了查询商品功能的类层次，它表达了实现类位于哪个层次的软件架构的观点。\n\n6.2.1.5 组件图当有些包能够被多个场景重复使用，那这个包就可以认为有着特定的功能，能够完成特定的目标。\n这种情况下，包就可以定义为组件，组件是一种特殊的包，既起到了普通包组织和容纳的作用，又能完成特定的功能。\n比如模块（登录模块），类库（Java Guava 包）。\n下图可以表达组件实现的过程，通过第三方软件或者面向对象分析设计过程中产生的各种包，可以定义组件。\n\n组件可以按功能分为以下几类：模块、子系统、库、可执行文件和程序包等等。\n\n6.2.1.6 部署图部署图描述了物理上系统运行时的结构，包括系统中硬件的分布以及软件部署到硬件上的具体方式。\n部署图用于设计建模阶段，采用节点和关系两种核心元素来绘制。常用于分布式应用环境和多设备应用环境。\n\n上图是一个简单的部署图，表达了客户端比如浏览器这个节点，会请求到 Web 服务器节点，最后通过数据库服务器节点返回数据。如果涉及分布式环境，就要考虑多个 Web Server，多个 Database Server，甚至考虑多机房，异地等物理层面的部署方式。\n6.2.2 行为视图结构视图介绍完，我们讲讲行为视图。\n行为视图也称为动态视图。动态视图就是描述事物动态行为的。动态视图不能独立存在，它必须基于一个静态视图或者 UML 元素，说明在静态视图规定的事物结构下它们的动态行为。\n这里简要介绍的动态视图包括状态图、活动图、时序图和协作图。\n6.2.2.1 状态图状态图也称状态机，它描述了一个对象的生命周期，你可以把它理解成一台运行中的机器，这台机器负责这个对象在固定几个状态间的流转。\n这个对象可以是业务实体对象，也可以是分析类对象，还可以是设计类对象。也就是说，在面向对象分析设计的三个阶段（业务建模，概念建模，设计建模），都可以用状态图来表达。\n下图是一个产品的生命周期状态图。绿色部分是状态图相关的元素，红色部分是元素的解释。\n\n从图中，我们可以看到，状态图有以下关键元素：\n\n初始状态：它是状态机的起始位置，不需要事件的触发。用实心圆圈表示。\n状态：状态是对象执行某项活动或者等待某个事件时的条件。比如要想执行产品入库动作，产品得是未入库的状态，如果想销售某个产品，产品得是入库的状态。\n转移：转移是两个状态之间的关系，它表示当发生指定事件并且满足指定条件时，第一个状态中的对象将执行某些操作并进入第二个状态。比如产品入库这个动作，就将产品的状态从未入库转移到了已入库。\n事件：事件是一个特定的动作或行为，有时候也包括系统时钟之类的定时器。如果条件满足，事件的发生将触发一个转移。比如产品销售这个动作，出发产品从已入库状态转移至已销售状态。\n条件：条件是一个布尔表达式，当事件发生时将检查这个表达式的值。条件求值结果可能决定转移的分支，或者拒绝转移。条件有可能引用当前状态。比如产品合不合格这个布尔判断，决定了产品是可被销售，还是不可被销售。\n最终状态：最终状态表示状态机执行结束，或者对象生命周期结束。用带环的实心圆圈表示。\n\n6.2.2.2 活动图活动图描述了为了完成某一个目标需要做的活动以及这些活动的执行顺序。\nUML 中有两个层面的活动图，一种是用例活动图，它用于描述用例场景，常用于业务建模阶段，另一种是对象活动图，用于描述对象交互，常用于设计建模阶段。\n下图是一个登机手续办理的用例活动图。绿色部分是活动图相关的元素，红色部分是元素的解释。\n\n从图中，我们可以看到，活动图有以下几个关键元素：\n\n起始点：起始点标记业务流程的开始。一个活动图仅有一个。用实心圆圈表示。\n活动：活动是业务流程中的一个执行单元。比如办理登机手续需要出示机票和身份证这样的动作。\n判断：判断根据某个条件进行决策，执行不同的流程分支。比如身份核对决定了你能否继续办理登机手续。\n基本流：基本流表示最主要、最频繁使用的、默认的业务流程分支。比如身份核对的正常分支。\n支流：支流是进行判断后走进的业务流程分支。比如图中无行李分支。\n异常流：异常流表示非正常的、不是业务目标期待的、容错性的、处理意外情况的业务流程分支。比如身份证核对错误。\n同步：同步分为同步起始和同步汇合。\n同步起始表示从它开始多个支流并行执行。比如托运行李的处理和登机牌的打印操作，可以并行。\n同步汇合表示多个支流同时到达后再执行后续活动。\n\n\n结束点：结束点表示业务流程的终止。一个或多个。\n\n用例活动图常常是从业务的角度上，分析要完成某个目标，要执行哪些活动。如果在系统设计的角度上，要表达完成目标需要的活动，就需要用到对象活动图。\n比如根据查询商品的对象交互过程，就能绘制出以下的对象活动图。\n\n虽然 UML 允许用活动图绘制对象交互，但实际工作中，我从来没用过。因为 UML 有其他更好的工具来绘制对象交互图，比如接下来要讲的时序图。\n6.2.2.3 时序图时序图用于描述按时间顺序排列的对象之间的交互模式。\n前面类图那一节有提过类有三个层次的观点：概念层、说明层和实现层，分别对应于面向对象分析设计的业务建模阶段、概念建模阶段和设计建模阶段，相应的，也可以在这三个层次上分别对业务实体对象、分析类对象和设计类对象绘制业务模型时序图、概念模型时序图和设计模型时序图。\n\n接下来介绍三种时序图。\n业务模型时序图用于为领域模型中的业务实体交互建模，目标是实现业务用例。\n上一节提到的活动图，可以帮助我们发现业务实体，活动图也可以很轻易的转换成时序图，下图是网上购买商品的业务模型时序图。\n\n时序图中会涉及一些 UML 元素，这里列举常用的几个：\n\n对象：表示参与交互的对象。每个对象都有一条生命周期线，对象被激活时，生命周期线上会出现一个长条（会话），表示对象的存在。\n生命周期线：表示对象的存在。当对象被激活时，生命周期线上出现会话，表示对象参与了这个会话。\n消息：表示对象间交互所发生的动作。由一个对象的生命周期线指向另一个对象的生命周期线。常见的消息类型有以下几种：\n简单消息：向右的实线箭头，这种最为常用。\n返回消息：源消息的返回体，并非新消息。用向左的单向虚线箭头表示。一般不需要为每个源消息都绘制返回消息，一方面源消息默认情况下都有返回消息，另一方面过多的返回消息会让图变得更复杂。\n同步消息：表示发出消息的对象将停止所有后续动作，一直等到接收消息方响应。用向右带×的单向实线箭头表示。同步消息将阻塞源消息所有行为。通常程序之间的方法调用都是同步消息。\n异步消息：表示源消息发出消息后不等待响应，而可以继续执行其他操作。用向右的单向上箭头表示。异步消息一般需要消息中间件的支持，如 MQ 等。\n\n\n会话：表示一次交互，在会话过程中所有对象共享一个上下文环境。例如操作上下文。\n销毁：表示生命周期的终止。绘制在生命周期线的末端，一般没有必要强调。\n\n业务模型时序图是业务建模阶段的产物，它展现了业务的实际需求，因此使用的描述语言应当采用业务术语。\n进入概念建模阶段，可以采用分析类绘制概念模型时序图。和业务模型时序图相比，同样是展现业务需求，不同点在于分析类代表了系统原型，所以这个阶段的时序图已经带有了计算机层面的理解。\n因此，概念模型时序图既保留了实际业务需求，又得到了计算机实现的基本理念。如下图所示。\n\n可以看到，在概念模型时序图里，相对于业务模型时序图，我们的表达增加了安全认证和商品目录。这是因为我们实际在做登录这个功能时，我们的软件系统需要关心身份核验。我们在获取商品时，为了避免杂乱需要对其进行分类。\n另外，我们的业务实体转为分析类进行表达，网站作为边界类，用于隔离用户操作和系统行为。安全认证作为控制类，用于决定是否能成功登录网站。商品目录和商品作为实体类，用于表达用户实际想看到或者操作的实体信息。 \n分析类展示出来的已经是系统实现的原型，进入设计建模阶段，我们做的工作就是要选择合适的实现方式来实现这个原型。\n设计建模阶段，我们采用设计模型时序图来实现概念模型中的交互。\n设计模型时序图使用设计类作为对象绘制，也是我们日常开发设计中最为常用的动态视图。以下是商品查询的设计模型时序图。\n\n可以看到，在设计模型时序图里，消息会细致到方法级别。因为在这个阶段，相关的技术选型，比如编程语言，交互协议，中间件等已经比较明确了。\n时序图除了在建模的三个阶段使用外，当你需要表达对象的交互，或者想分析对象的职责和接口时，都可以使用时序图。\n6.2.2.4 协作图协作图和时序图一样，也是描述对象之间的交互模式，不同的是，时序图在意的是对象交互的执行顺序，而协作图在意的是对象间的结构关系。\n因此，时序图适用于获得对调用过程的理解，而协作图适用于获得对对象结构的理解。\n协作图可以和时序图互相转换，对应时序图的三种表达方式，协作图也分为业务模型协作图，概念模型协作图和设计模型时序图。本文只介绍业务模型协作图，另外两种协作图可以由相应的时序图推导，这里就不赘述了。\n业务模型协作图同样采用业务实体来绘制，目标也是实现用例场景。下图是网上购买商品的业务模型协作图。\n\n可以看到，协作图和时序图相比，对象间的结构一目了然，很容易知道哪些消息会影响哪些对象或者哪些对象需要提供哪些接口。但在执行顺序的表达上就很弱，必须依赖消息文本里的数字。\n以下是协作图常用的 UML 元素：\n\n对象：表示参与协作的对象。\n对象关联：用于连接两个对象，表示二者的关联。这种关联是临时的，只在本次交互中有效。\n消息：和时序图中的消息定义一致。\n消息序号：表明消息传递的先后顺序。\n\n\n\n6.2.3 小结本节介绍了 UML 的核心视图，我们再看下核心视图的大纲。\n\n核心视图分静态视图和动态视图。静态视图表达事物的结构性观点，动态视图表达事物的行为性观点。\n一个好的建模，结构性和行为性都不可或缺，既要说明该事物长什么样子，又要说明该事物应该怎么用。\n七、总结本文从一个示例开始，引入了 UML 的概念，介绍了什么是 UML，为什么要用 UML以及什么时候用 UML。我们了解一个事物，知其然也要知其所以然。\n然后介绍了 UML 的组成结构，从元素和视图的角度出发，讲解了绘制图形的方法和相关概念。文中也给出了很多我亲手绘制的样例视图，如有错误之处，还望读者指摘。\n纸上得来终觉浅，绝知此事要躬行。知道和做到总有一段距离，重在实践。\n希望这篇文章对从事面向对象编程的读者朋友能够有所启发，欢迎和我一起交流，也欢迎转发给有需要的朋友。\n（完）\n\n\n","categories":["教程"],"tags":["教程","UML"]},{"title":"彩云小译：最佳的网页翻译插件","url":"https://java4u.cn/course/cai_yun_xiao_yi/","content":"前言当你浏览一些国外网站的时候，看到英文会不会头大？\n英文不好的你可能就直接关闭页面了，当然也有朋友硬着头皮去翻译，不过大多数人的操作就是，复制一段内容，粘贴到翻译网站搞明白原文意思，然后再复制粘贴，如此循环往复，直到读懂页面内容。\n但这样操作一是 比较麻烦 ，二是 影响阅读体验 。\n那么有没有一个工具，能帮助我们加载网站页面的时候就能看到翻译后的内容，最好原内容也不要替换掉，这样遇到不通顺的地方也可以人肉校准。\n\n我今天看资料的时候，就发现了这么一款工具，非常简单好用，接下来就介绍下它。\n工具介绍这个神器是一个谷歌浏览器扩展插件，名字叫 彩云小译 。它能够通过双语对照的方式进行网页翻译，可以一键高效的让你获得母语级阅读体验。\n以下是这个插件截图和相关设置。\n\n可以看到，它像很多同类插件一样支持划词翻译，同时提供语音朗读。\n\n不过它的杀手锏是网页翻译。会识别英语和日语，手动或自动翻译成中文。喜欢自动翻译的话，设置里打个勾就行。翻译字幕默认显示也提供「双语对照」、「只显示原文」和「只显示译文」三种设置。你可以按需配置，我比较喜欢双语对照模式，如下图。\n\n工具使用有条件科学上网的朋友，可以直接在 chrome 网上应用商店搜索 彩云小译 ，添加至 chrome 即可使用。\n另外一部分朋友就需要下载插件源文件，打开谷歌浏览器的开发者模式，将源文件拖入该地址下：chrome://extensions/  ，安装即可使用。\n需要插件源文件的朋友，可以后台回复 chrome_plugin_cyxy 获取下载链接。\n这里也有官方发布的安装和使用的短视频。\n这款工具简单又好用吧，如果对你有用的话，可以给我点个赞，分享给身边朋友，非常感谢读者朋友，也欢迎关注我，我会分享更多优质原创内容。\n\n\n","categories":["教程"],"tags":["实用工具","教程","翻译","chrome 插件"]},{"title":"最佳的思维导图生成工具： markmap 使用教程","url":"https://java4u.cn/course/markmap/","content":"前言相信很多程序员朋友都有在用 Markdown 吧，我是大三找实习工作的时候接触到的，简历就是用 Markdown 写的。\nMarkdown 的好处是专注码字的同时还能兼顾排版，不用像 word 那样文本加个粗都需要移动下鼠标，体验非常好。\n它的缺点就是可视化能力很弱，这就降低了信息的传播效率，毕竟人对于图像化内容的接收程度要强于文本。\n可视化表达方面，思维导图就很不错。它作为一种图象化工具，通过层级式发散式地组织主题，帮助我们更好的记忆、学习和思考。\n但在过去，这两类工具是各自独立的，也就是你写完 Markdown 文本，想要可视化地传达一些重点给读者，就需要重新录入下思维导图，因此比较繁琐，这也是我不怎么用思维导图的原因。\n不过最近我发现一款很好用的工具，可以很好的解决上边的问题，在此分享给大家。以下是本文的重点内容对应的思维导图，就是用这款工具生成的。\n\n工具介绍这款工具叫 markmap。\nmarkmap 可以将 Markdown 语法的文本通过思维导图的方式进行可视化。以下是官网截图，markmap 这个名字来自 markdown 的前半部分 和 mindmap 的后半部分，slogan 是 Visualize your Markdown with mindmaps 。\n\n工具使用在线版如果你不想安装任何东西，那可以直接浏览器（建议 chrome 浏览器）上访问 https://markmap.js.org/repl 即可仿照官网模板进行转换，如下图。左边录入 Markdown 文本，右边会实时展示出思维导图。\n\nMarkdown 语法中的链接，加粗，删除线，斜体，单行代码，代码块，数学公式，转换成思维导图都有相应的视图效果。而且支持下载生成动态化的 html 文件以及 svg 文件。\n动态化效果如下图，可以折叠和打开。\n\n离线版如果你想拥有更好的使用体验，并且希望在断网的情况下也能够使用，那我推荐你下面这种方案。\n在 Visual Studio Code 上安装 markmap 插件，如下图。\n\n编辑 Markdown 文本，文件名以 .mm.md 结尾即可使用，并且可以点击右下角「export」按钮导出动态的 html 文件。\n\n这款工具简单又好用吧，如果对你有用的话，可以给我点个赞，分享给身边朋友，非常感谢读者朋友，也欢迎关注我，我会分享更多优质原创内容。\n\n\n","categories":["教程"],"tags":["实用工具","教程","思维导图","Markdown"]},{"title":"建站神器：Hexo+Kaze+Gitee Pages 搭建静态博客网站","url":"https://java4u.cn/course/hexo_site_course/","content":"前言建网站本身是一个很大的工程，涉及前端页面的搭建，网站数据的存储，还要购置服务器资源，甚至是后期的维护，过程相当繁琐。\n不过如果仅仅是想搭建个人的网站，写写博客，想要美观，又不想操心太多和写博客无关的事情。那么，Hexo + Kaze + Gitee Pages 的方式就很适合你。\n本文就讲下如何借助这三样免费的技术或服务，来搭建一个可访问的静态博客网站。\n\nHexo 简介Hexo 是什么？Hexo 是一个快速，简单且功能强大的博客框架。如果你用 Markdown 写博客，Hexo 可以在几秒内生成带有精美主题的静态文件。\nHexo 安装前置要求\nNode.js（版本 10.13 以上，建议使用 12.0 以上版本）\nGit\n\n安装 Git\nWindows：下载并安装 git。\nMac：使用 Homebrew 安装。\nLinux（Ubuntu，Debian）： sudo apt-get install git-core \nLinux（Fedora，Red Hat，CentOS）： sudo yum install git-core \n\n安装 Node.jsNode.js 为大多数平台提供了 官方安装程序。\n替代安装方法：\n\nWindows：使用 nvs 安装它。\nMac：使用 Homebrew 安装。\nLinux（基于DEB / RPM）：与 NodeSource 一起安装。\n其他：通过相应的软件包管理器进行安装。请参阅 Node.js 提供的指南。\n\n安装 Hexo用 npm 安装 Hexo。\nnpm install -g hexo-cli\n\n\n\n使用以下指令查看是否安装成功。\nhexo version\n\n\n\n如果你想卸载 Hexo，使用以下指令：\nnpm uninstall -g hexo-cli \n\n\n\n运行 hexo安装后，你可以通过 hexo &lt;command&gt; 运行 Hexo。比如通过 hexo help 指令来获取使用帮助。\nhexo help\n\n\n帮助里提到 hexo init 命令可以创建一个新的 Hexo 文件夹，这个文件夹其实就是利用 Hexo 生成的站点信息了。接下来讲下怎么建站。\nHexo 建站初始化操作使用  hexo init &lt;folder&gt; 指令就可以在指定文件夹下建立站点信息，我一般用域名做名称，如下：\nhexo init java4u.cn\n\n\n\n站点初始化中：\n\n站点初始化完成，会生成指定的文件夹：\n\n目录结构进入该站点，我们看下目录结构，如下：\n\n这些文件有着各自的职责：\n\n_config.landscape.yml：自定义的主题配置文件，此处的 landscape 是默认主题。配置其他主题可以参考这种方式。\n_config.yml：站点全局的配置文件。\nnode_modules：node 模块文件夹。包含可执行文件和依赖的资源。\npackage-lock.json：node_modules 文件中所有模块的版本信息，模块来源。\npackage.json：Hexo 框架的基本参数信息以及它所依赖的插件。\nscaffolds：scaffolds 原意是脚手架，这里可以理解为模板文件夹。当你创建新的文章时，Hexo 会根据该文件夹下的对应文件进行初始化构建。\nsource：资源文件夹。这里是你放自己资源比如博文和图片的地方。 _posts 文件夹下的 Markdown 和 HTML 文件会被解析并放到 public 文件夹下。其他文件或文件夹，如果开头命名不是 _ (下划线)，也都会被拷贝过去。\nthemes：主题文件夹。Hexo 会根据主题来生成静态页面。\n\n基于这样的结构，Hexo 就具备了生成静态网站的能力。\n本地启动我们先本地启动，看下实际效果。输入以下命令：\nhexo server\n\n\n\n\n\nHexo 会启动服务，将默认生成的网站运行在本机的 4000 端口上，可以直接访问 http://localhost:4000 就能看到网站首页，它基于默认主题生成，同时有一篇默认文章。\n\n这个页面只是官方提供的一个样例，看到它就意味着你本地环境跑通了。我们可以通过修改配置的方式，对页面相关元素做调整。\n核心配置以下是我们需要了解或者修改的配置信息。\npackage.json这个文件列出了 Hexo 的基本参数信息以及它所依赖的插件。可以看到，EJS，Stylus 和 Markdown 渲染器都是默认安装的。\n&#123;  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;hexo generate&quot;,    &quot;clean&quot;: &quot;hexo clean&quot;,    &quot;deploy&quot;: &quot;hexo deploy&quot;,    &quot;server&quot;: &quot;hexo server&quot;  &#125;,  &quot;hexo&quot;: &#123;    &quot;version&quot;: &quot;&quot;  &#125;,  &quot;dependencies&quot;: &#123;    &quot;hexo&quot;: &quot;^5.0.0&quot;,    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,    &quot;hexo-generator-index&quot;: &quot;^2.0.0&quot;,    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,    &quot;hexo-renderer-marked&quot;: &quot;^3.0.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^2.0.0&quot;,    &quot;hexo-server&quot;: &quot;^2.0.0&quot;,    &quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;  &#125;&#125;\n\n\n\n\n如果后边要切换主题，记得把最后一个默认的主题依赖删除掉。\n\n_config.yml可设置网站、网址、目录、文章、分类&amp;标签、日期/时间格式、分页和扩展等信息。\n网站\n\n\n\n参数\n描述\n\n\n\ntitle\n网站标题\n\n\nsubtitle\n网站副标题\n\n\ndescription\n网站描述，用于 SEO\n\n\nkeywords\n网站的关键词，支持多个关键词。\n\n\nauthor\n文章作者。\n\n\nlanguage\n网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。\n\n\ntimezone\n网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。\n\n\nURL\n\n\n\n参数\n描述\n默认值\n\n\n\nurl\n网址, must starts with http:// or https://\nhttp://example.com\n\n\nroot\n网站根目录，如果放子目录，设置 /blog/ \n/\n\n\npermalink\n文章的 永久链接 格式\n:year/:month/:day/:title/\n\n\npermalink_defaults\n永久链接中各部分的默认值\n\n\n\npretty_urls\n改写 permalink 的值来美化 URL\n\n\n\npretty_urls.trailing_index\n是否在永久链接中保留尾部的 index.html，设置为 false 时去除\ntrue\n\n\npretty_urls.trailing_html\n是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)\ntrue\n\n\n目录\n\n\n\n参数\n描述\n默认值\n\n\n\nsource_dir\n资源文件夹，这个文件夹用来存放内容。\nsource\n\n\npublic_dir\n公共文件夹，这个文件夹用于存放生成的站点文件。\npublic\n\n\ntag_dir\n标签文件夹\ntags\n\n\narchive_dir\n归档文件夹\narchives\n\n\ncategory_dir\n分类文件夹\ncategories\n\n\ncode_dir\nInclude code 文件夹，source_dir 下的子目录\ndownloads/code\n\n\ni18n_dir\n国际化（i18n）文件夹\n:lang\n\n\nskip_render\n跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。\n\n\n\n文章\n\n\n\n参数\n描述\n默认值\n\n\n\nnew_post_name\n新文章的文件名称\n:title.md\n\n\ndefault_layout\n预设布局\npost\n\n\nauto_spacing\n在中文和英文之间加入空格\nfalse\n\n\ntitlecase\n把标题转换为 title case\nfalse\n\n\nexternal_link\n在新标签中打开链接\ntrue\n\n\nexternal_link.enable\n在新标签中打开链接\ntrue\n\n\nexternal_link.field\n对整个网站（site）生效或仅对文章（post）生效\nsite\n\n\nexternal_link.exclude\n需要排除的域名。主域名和子域名如 www 需分别配置\n[]\n\n\nfilename_case\n把文件名称转换为 (1) 小写或 (2) 大写\n0\n\n\nrender_drafts\n显示草稿\nfalse\n\n\npost_asset_folder\n启动 Asset 文件夹\nfalse\n\n\nrelative_link\n把链接改为与根目录的相对地址，建议使用绝对地址。\nfalse\n\n\nfuture\n显示未来的文章\ntrue\n\n\nhighlight\n代码块的设置, see Highlight.js section for usage guide\n\n\n\nprismjs\n代码块的设置, see PrismJS section for usage guide\n\n\n\n分类 &amp; 标签\n\n\n\n参数\n描述\n默认值\n\n\n\ndefault_category\n默认分类\nuncategorized\n\n\ncategory_map\n分类别名\n\n\n\ntag_map\n标签别名\n\n\n\n日期/时间格式\nHexo 使用 Moment.js 来解析和显示时间。\n\n\n\n参数\n描述\n默认值\n\n\n\ndate_format\n日期格式\nYYYY-MM-DD\n\n\ntime_format\n时间格式\nHH:mm:ss\n\n\nupdated_option\n当 Front Matter 中没有指定 updated 时 updated 的取值，支持 mtime(文件最后修改时间)，date(使用 date 的值)，empty(不指定)\nmtime\n\n\n分页\n\n\n\n参数\n描述\n默认值\n\n\n\nper_page\n每页显示的文章量 (0 = 关闭分页功能)\n10\n\n\npagination_dir\n分页目录\npage\n\n\n扩展\n【主题】\n\n\n\n参数\n描述\n默认值\n\n\n\ntheme\n当前主题名称。值为false时禁用主题\nlandscape\n\n\ntheme_config\n主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置\n无初始配置\n\n\ndeploy\n部署部分的设置\n\n\n\nmeta_generator\nMeta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签\ntrue\n\n\n【部署】\n配置如下：\ndeploy:  type: git  repo: &lt;repository url&gt; #https:&#x2F;&#x2F;bitbucket.org&#x2F;JohnSmith&#x2F;johnsmith.bitbucket.io  branch: [branch]  message: [message]\n\n\n\n\n\n\n参数\n描述\n默认\n\n\n\nrepo\n库（Repository）地址\n\n\n\nbranch\n分支名称\ngh-pages (GitHub) coding-pages (Coding.net) master (others)\n\n\nmessage\n自定义提交信息\nSite updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)\n\n\ntoken\nOptional token value to authenticate with the repo. Prefix with $ to read token from environment variable\n\n\n\n常用指令创建文章使用以下指令：\nhexo new &quot;test&quot;\n\n\n\n或者简写：\nhexo n &quot;test&quot;\n\n\n\n运行服务器输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server\n\n\n\n或者简写：\nhexo s\n\n\n\n生成静态文件hexo generate\n\n\n\n或者简写\nhexo g\n\n\n\n监视文件变动立即重新生成。该操作会阻塞命令。\nhexo g --watch\n\n\n\n生成完毕后自动部署网站。\nhexo generate --deploy\n\n\n\n部署Hexo 提供了快速方便的一键部署功能，让你只需一条命令就能将网站部署到服务器上。\nhexo deploy\n\n\n\n或者简写为：\nhexo d\n\nHexo 主题为什么选择 KazeHexo 默认主题为 landscape，但我觉得不够美观，这里推荐 kaze ,它有以下特性：\n\n响应式设计，适配桌面端、平板、手机等各种设备\n\n前端性能优化，加载快速，眨眼之间即可加载完成\n\n图片懒加载，应用懒加载技术加快页面的生成速度\n资源压缩，提升本地资源请求速度\n精简设计，不包含 Jquery 等额外库\n\n\n支持侧边栏小组件，例如最近文章，作者卡片\n\n暗黑模式，享受黑夜的魅力\n\n代码高亮，支持 prismjs\n\n公式渲染，支持 katex 和 mathjax\n\n评论系统，集成 valine、gitalk 和 livere\n\n访问量统计和谷歌分析支持\n\n\n安装 Kaze在 your site/themes 下输入\ncd themesgit clone https:&#x2F;&#x2F;github.com&#x2F;theme-kaze&#x2F;hexo-theme-Kaze.git\n\n\n\n安装成功后，会生出目录：hexo-theme-Kaze。\n修改站点配置文件 _config.yml 下的主题值为：hexo-theme-Kaze。\n\n用 hexo server 启动 Hexo 服务看下效果。\n\n会看到已经生成了默认的主题，只是很多东西都没有，需要改造一下。\n主题配置可在该主题目录下的 _config.yml 文件里配置。\n主题颜色在 color 中进行配置，以下是默认值。\ncolor:  text-color: &quot;#3c4858&quot;  text-strong-color: &quot;#2f3d4e&quot;  text-light-color: &quot;#909faf&quot;  divider-color: &quot;#e6e8ee&quot;  title-color: &quot;#475b6d&quot;  link-color: &quot;#3273dc&quot;  link-hover-color: &quot;#6596e5&quot;  info-text-color: &quot;#909faf&quot;  widget-background-color: &quot;#fff&quot;  body-background-color: &quot;#f2f5f8&quot;  border-color: &quot;#e1e4e9&quot;  pre-color: &quot;#2d2d2d&quot;  code-color: &quot;#50687c&quot;  code-background-color: &quot;#e9eaf0&quot;\n\n\n\n\n\n字号与字体在 font 中进行配置，以下是默认值。\nfont:  font-size: 16px # global font-size  font-family: &#39;-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,sans-serif&#39; # global font-family\n\n站点访问量统计访问量统计目前仅支持不蒜子，默认关闭，可统计站点总访问量和总访客数。\nfooter:  #------------------------  # pv &#x2F; uv statistics config  #------------------------  statistics:    enable: false    type: busuanzi # now version only supports busuanzi    pv:      enable: true      style: 本站总访问量&#123;&#125;次 # the style will be shown as $1&#123;pv&#125;$2    uv:      enable: true      style: 本站总访客数&#123;&#125;次 # the style will be shown as $1&#123;uv&#125;$2\n\n\n\n数据分析analytics:  enable: false  type: google # google  google:    id:\n\nenable 开启分析支持（默认关闭）\ntype&#96; 目前仅支持 &#96;google\n\ngoogle.id 有关谷歌分析的具体使用说明和 id 使用可以参考谷歌文档\n首页文章头图在文章 Front-matter 中 banner_img 可以设置首页头图\n小组件widgets:  showWidgetsMobiles: &quot;none&quot;\n\nshowWidgetsMobiles : 在窄屏幕上是否显示小组件，none 关闭（默认），flex 开启\n关于关于页面需要自行创建，在站点 source 中新建 about 文件夹并在文件夹内创建 index.md，该文件至少需要包含\n# at $&#123;yoursite&#125;&#x2F;about&#x2F;index.md---title: 关于layout: about---\n\n社交链接在 about 下的 social_links中进行配置，主题图标依赖于 iconfont，内置了一部分社交图标，你可以自定义其他icon文件或者解决方案来添加自定义图标。\nabout:  description: description  social_links:    - &#123; icon: icon-github, link:  https:&#x2F;&#x2F;xxx&#125;    # - &#123; icon: icon, link: your link &#125;\n\n\n友链友链格式按如下填写即可生成友链页面\nlinks:  example-name-1:     url: https:&#x2F;&#x2F;example.com    avatar: https:&#x2F;&#x2F;example.com&#x2F;avatar.jpg  example-name-2:     url: https:&#x2F;&#x2F;example.com    avatar: https:&#x2F;&#x2F;example.com&#x2F;avatar.jpg\n\n文章页搜索功能search:  enable: true  path: search.json  field: posts  searchContent: true\n\n\nenable 开启搜索功能（默认开启）\npath 文件名称（暂无用处）\nfield 需要搜索的范围，支持 posts | pages | all\nsearchContent 搜索文件是否包含正文内容（不建议开启，包含所有文章内容这样会使得搜索文件异常巨大）替代方案是搜索分类标签或使用algolia等第三方搜索服务（Todo）\n\n目录主题目录通过Hexo原生函数生成，具体可参见 文档\ntoc:  showListNumber: false  maxDepth: 6  minDepth: 1\n\nshowListNumber 是否生成编号\nmaxDepth TOC最大深度\nminDepth TOC最小深度\n代码高亮参见代码 高亮文档\n数学公式主题支持 mathjax 和 katex 两种渲染引擎，具体参见 相关文档\ncopyrightcopyright:  enable: true  writer: # if writer is empty we will use config.author as writer  declare: 本博客所有文章除特别声明外，均采用&lt;a target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;deed.zh&quot;&gt;CC BY-NC-SA 4.0 协议&lt;&#x2F;a&gt;。转载请注明出处！  style: warning\n\nenable 开起版权说明（默认开启）\nwriter&#96; 作者id，如果不填则会使用主题配置&#96;author&#96;或站点配置&#96;author\n\ndeclare 版权声明具体内容，支持 html 语句\nstyle 声明内容样式，与 note 样式相同\n版权内容有三部分：作者、文章链接、版权声明\n作者使用 writer 参数，文章链接基于站点配置文件中url参数生成，版权声明使用 declare 参数\nFront-matterbanner_img设置文章与首页头图\nbanner_img_set在图片加载时预先加载的图片，可以设置为 loading 图或缩略图等\nexcerpt为文章设置在首页显示的简介，还可以通过 &lt;!--more--&gt; 来控制显示\n评论支持 valine，gitalk 和 livere\n具体设置可参考主题配置文档说明和相关评论插件文档\n字数统计主题集成 hexo-wordcount 插件，在主题配置文件中设置\nwordcount:  enable: true\n\n开启（默认开启）\n图片画廊图片画廊功能基于 fslightbox，在主题配置文件中设置\nfslightbox:  enable: true\n\n开启（默认开启）\n标签插件主题集成了一些标签方便书写\nnote在 markdown 文件中如下书写即可\n&#123;% note style %&#125;...markdown content&#123;% endnote %&#125;\n\n有五种样式可以选择，primary，success，info，warning，danger\n\n备案信息您可以在主题配置文件内增加您的备案信息。\nfooter:  #------------------------  # 备案配置  # 请将公安备案的缩略图置于 $&#123;yoursite&#125;&#x2F;img&#x2F;beian.png  RecordInfo: &quot;&quot; # &#39;某ICP备xxx号&#39;  govRecordInfo: &quot;&quot; # &#39;某公网安备xxx号&#39;  govRecordUrl: &quot;&quot; # 公网安备案信息地址  #------------------------\n\n\n\n站点托管为什么选择 Gitee PagesGitHub 和 Gitee 都提供免费的静态网页托管服务。我们可以使用 GitHub Pages 或 Gitee Pages 托管博客、项目官网等静态网页，这样就省去了购买服务器的钱，也不需要耗费太多精力维护。\nGitHub Pages 使用很广泛，我之前也用过，不过访问不够稳定，会影响页面加载速度。Gitee 是国内版的 GitHub，访问速度优秀，并且国内发展势头不错，因此我选取 Gitee Pages 来托管我的网站。\n建立仓库申请一个 Gitee 账号，创建一个新的仓库，仓库名尽量和账号名一致，这样可以避免一些因为路径引发的问题。\n\n然后在仓库首页服务一栏开启 Gitee Pages 服务。\n\n开启后，你就拥有了专属的二级域名网址。\n注意：仓库内容有变化，需要手动触发更新，页面才能真正生效。\n连接仓库\n安装 hexo-deployer-git。\n\nnpm install hexo-deployer-git --save\n\n\n\n\n\n修改配置。\n\ndeploy:  type: git  repo: git@gitee.com:java4u&#x2F;java4u.git\n\n注意上面的 repo 地址并不是仓库的地址，而是你下载/克隆项目时弹出的那个地址，type 如果是 git 就选择 SSH。\n\n\n生成/添加 SSH 公钥\n\nGitee 、GitHub 提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库仓库之前，需要先配置好账户/仓库的 SSH 公钥。\n先看下自己有没有配置过用户名和邮箱：\ngit config --global user.name git config --global user.email\n\n\n如果没有就做下配置：\n# 设置邮箱git config --global user.email *********@qq.com # 设置用户名git config --global user.name &#39;****&#39;\n\n然后本地生成 SSH 公钥，邮箱为刚配置好的账户：\nssh-keygen -t rsa -C yong__1994@163.com\n\n生成后可查看 SSH 公钥：\ncat ~&#x2F;.ssh&#x2F;id_rsa.pub\n\n复制公钥去 Gitee 粘贴，添加。\n\n测试是否连接成功：\nssh -T git@gitee.com\n\n\n上传仓库执行部署命令，即可将本地资源上传远程仓库。\nhexo d\n\n\n\n手动更新远程仓库虽然可以看到提交记录，但静态网站不会感知到实时变更，需要去 Gitee Pages 服务页面做下更新。\n\n稍等片刻，访问 https://java4u.gitee.io/ 即可看到 Hexo 结合 kaze 主题搭建的静态网站。\n\n\n\n","categories":["教程"],"tags":["实用工具","教程","建站"]}]